#!/usr/bin/Rscript

HOME_DIR <- "/home/rforge/Documents/github/norcad"
RCPT_TO <- NULL

 # load packages

require(knitr)
require(htmlTable)
require(Hmisc)

require(smcfcs)
require(purrr)

require(survival)
require(quantreg)
require(mgcv)


 # load all R functions from the directory

lapply(
    X = dir( paste( HOME_DIR , "functions" , sep = "/") ) ,
    FUN = function(X) source( paste( HOME_DIR , "functions" , X , sep = "/"))) -> DoNotPrint


 # open the JSON with the study design

JSON <- jsonlite::fromJSON( txt = "report.json" , simplifyVector = FALSE)

Events <- sapply( JSON$Survival$Endpoints , with , Event )
Es <- paste( "E" , 0:(length(Events) - 1) , sep = "" )

Times <- sapply( JSON$Survival$Endpoints , with , Time )
Ts <- paste( "T" , 0:(length(Times) - 1) , sep = "" )

Predictors <- sapply( JSON$Survival$Predictors , with , Name )
Ps <- paste( "P" , 0:(length(Predictors) - 1) , sep = "" )

Modifiers <- sapply( JSON$Survival$Modifiers , with , Name )
Ms <- paste( "M" , 0:(length(Modifiers) - 1) , sep = "" )

Adjustments <- sapply( JSON$Survival$Adjustments , with , Name )
As <- paste( "A" , 0:(length(Adjustments) - 1) , sep = "" )
nLevels <- sapply( JSON$Survival$Adjustments , with , Level )

Forestplot <- sapply( JSON$Survival$Forestplot , with , Name )
Fs <- paste( "F" , 0:(length(Forestplot) - 1) , sep = "" )


Measures <- sapply( JSON$Characteristics$Measures , with , Name )
PMs <- paste( "PM" , 0:(length(Measures) - 1) , sep = "" )

Groups <- sapply( JSON$Characteristics$Groups , with , Name )
PGs <- paste( "PG" , 0:(length(Groups) - 1) , sep = "" )


 # create DB statements

dbVars <- paste0(
    c(
        paste( Events , "AS" , Es ) ,
        paste( Times , "AS" , Ts ) ,
        paste( Predictors , "AS" , Ps ) ,
        paste( Modifiers , "AS" , Ms ) ,
        paste( Adjustments , "AS" , As) ,
        paste( Measures , "AS" , PMs ) ,
        paste( Groups , "AS" , PGs ) ,
        paste( Forestplot , "AS" , Fs )) ,
        collapse = ", ")

dbWhere <- paste0(
    sapply(
        JSON$Population$Subset ,
        with ,
        Where ) ,
    collapse = " AND " )
        
dbStatement <- paste(
    "SELECT" ,
    dbVars ,
    "FROM PATIENT_INFO P
       LEFT JOIN LAB_BLOOD_TOTAL B ON P.FORUS_ID=B.FORUS_ID
       LEFT JOIN hs_medikament_skjema M ON P.FORUS_ID=M.FORUS_ID
       LEFT JOIN hs_hendelser_CVDNOR_mars14 C ON P.NORCAD_ID=C.NORCAD_ID
       LEFT JOIN hs_pasientrapport_skjema R ON P.FORUS_ID=R.FORUS_ID
         WHERE" ,
    dbWhere )


 # connect to DB and get data

if ( !exists("con") )
    con <- DBI::dbConnect(
        drv = RMySQL::MySQL() ,
        dbname = JSON$Population$Database )

D <- DBI::dbGetQuery(
    conn = con , 
    statement = dbStatement)



 # create survival objects for Cox regression

for (i in 0:(length(Events)-1)) {
    D[ , paste("Surv" , i , sep = "") ] <- Surv(
        time = D[,paste("T" , i , sep = "") ] ,
        event = D[,paste("E" , i , sep = "") ] )
}


 # create transformations of the original variables

for (i in 0:(length(Predictors)-1)) {
    if ( sapply( JSON$Survival$Predictors , with , Type )[i+1] == "numeric" ) {
        NlevelsMainPredictorClass <- 4
        D[ , paste("zP" , i , sep = "") ] <- z( D[ , paste("P" , i , sep = "") ] )
        D[ , paste("zlogP" , i , sep = "") ] <- zlog( D[ , paste("P" , i , sep = "") ] )
        D[ , paste("qP" , i , sep = "") ] <- q( D[ , paste("P" , i , sep = "") ] )
        D[ , paste("cP" , i , sep = "") ] <- cutN( D[ , paste("P" , i , sep = "") ] , NlevelsMainPredictorClass )
        D[ , paste("nP" , i , sep = "") ] <- as.numeric( cutN( D[ , paste("P" , i , sep = "") ] , NlevelsMainPredictorClass ))
    } else {
        D[ , paste("cP" , i , sep = "") ] <- D[ , paste("P" , i , sep = "") ]
        D[ , paste("nP" , i , sep = "") ] <- as.numeric( D[ , paste("P" , i , sep = "") ] )
    }
}



for (i in 0:(length(Modifiers)-1)) {
    if ( sapply( JSON$Survival$Modifiers , with , Type )[i+1] == "numeric" ) {
        NlevelsMainModifierClass <- 2
        D[ , paste("zM" , i , sep = "") ] <- z( D[ , paste("M" , i , sep = "") ] )
        D[ , paste("zlogM" , i , sep = "") ] <- zlog( D[ , paste("M" , i , sep = "") ])
        D[ , paste("qM" , i , sep = "") ] <- q( D[ , paste("M" , i , sep = "") ] )
        D[ , paste("cM" , i , sep = "") ] <- cutN( D[ , paste("M" , i , sep = "") ] , NlevelsMainModifierClass )
        D[ , paste("nM" , i , sep = "") ] <- as.numeric( cutN( D[ , paste("M" , i , sep = "") ] , NlevelsMainModifierClass ))
    } else {
        D[ , paste("cM" , i , sep = "") ] <- D[ , paste("M" , i , sep = "") ]
        D[ , paste("nM" , i , sep = "") ] <- as.numeric( factor(D[ , paste("M" , i , sep = "") ] ))
    }
}
    



   ### prepare the export directory and
   ### switch to it for reporting

system2(
    command = "rm" ,
    args = c("-r","export"))

system2(
    command = "mkdir" ,
    args = c("export"))

system2(
    command = "cp" ,
    args = c(
        paste( HOME_DIR , "*.Rmd" , sep = "/" ) ,
        "./export/"))

   # move into the export/ directory
setwd( "./export/" )


   # export the dataset
save( D , file = paste(
              paste0(
                  gsub(
                      " " , "" , c(
                                     sapply( JSON$Survival$Endpoints , with , ShortLabel ) ,
                                     sapply( JSON$Survival$Predictors , with , ShortLabel ) ,
                                     sapply( JSON$Survival$Modifiers , with , ShortLabel )
                                 )
                  ) ,
                  collapse = "-"
              ) ,
              "Rdata" ,
              sep = "." ))

   ### prepare knitr

opts_chunk$set(
    warnings=FALSE,
    echo=FALSE,
    dpi = 300 ,
    dev="svg")

options( width="130")

   ### Rscript iterates through all enpoint, predictor, modifier combinations and
   ### compiles the knitr files to tex

   ### Either one of them in knit2html():
   #             stylesheet = "/home/rforge/Documents/github/tufte-css/tufte.css",
   #             options=c( ... ,"fragment_only") ,
   #             options=c("use_xhtml","smartypants","base64_images","mathjax","highlight_code","fragment_only") ,


for (n.P in 1:length(Ps)) {

    PCFileName <- gsub(
        " " , "" ,
        paste(
            "PatientCharacteristics",
            sapply( JSON$Characteristics$Groups , with , ShortLabel )[n.P] ,
            sep = "-" ))


    PCOutfile <- paste( PCFileName , "md" , sep = "." )

    knit2html(
        input = "Patient_Characteristics.Rmd" ,
        options=c("use_xhtml","smartypants","mathjax","highlight_code","fragment_only") ,
        output = PCOutfile )
    
    for (n.M in 1:length(Ms)) {
        for (n.Surv in 1:length(Es)) {

            # Build the name of the PDF outfile from the
            # endpoint, predictor, modifier combination:
            FileName <- gsub(
                " " , "" ,
                paste(
                    sapply( JSON$Survival$Endpoints , with , ShortLabel )[n.Surv] ,
                    sapply( JSON$Survival$Predictors , with , ShortLabel )[n.P] ,
                    sapply( JSON$Survival$Modifiers , with , ShortLabel )[n.M] ,
                    sep = "-" ))

            opts_chunk$set(
                fig.path = paste("./figure/" , FileName , "-" , sep = "" ))
            
            SurvivalOutfile <- paste(
                "SurvivalAnalysis-" ,
                FileName ,
                ".md" ,
                sep = "" )

            knit2html(
                input = "Survival_Predictor_Modifier.Rmd" ,
                options=c("use_xhtml","smartypants","mathjax","highlight_code","fragment_only") ,
                output = SurvivalOutfile )


            if (
                ( sapply( JSON$Survival$Predictors , with , Type )[n.P] == "numeric" ) &
                ( sapply( JSON$Survival$Modifiers , with , Type )[n.M] == "numeric" )
            ) {

                GAM3dOutfile <- paste(
                    "GAM3d-" ,
                    FileName ,
                    ".md" ,
                    sep = "" )

                knit2html(
                    input = "GAM3d_OR_Predictor_Modifier.Rmd" ,
                    options=c("use_xhtml","smartypants","mathjax","highlight_code","fragment_only") ,
                    output = GAM3dOutfile )}
            
        }
    }
}



# zip the resulting pdf's, dataset, exported figures and tables

system2(
    command = "rm" ,
    args = c("*.Rmd","*.md"))

ZipName <- paste0(
    gsub(
        " " , "" , c(
                       "../Results" ,
                       sapply( JSON$Survival$Endpoints , with , ShortLabel ) ,
                       sapply( JSON$Survival$Predictors , with , ShortLabel ) ,
                       sapply( JSON$Survival$Modifiers , with , ShortLabel )
                   )
        ) ,
    collapse = "-"
)


system2(
    command = "zip" ,
    args = c(ZipName,"*.html","./figure/","*.json","*.Rdata"))



# email to Rforge

# is the server there?

MailServerUp <- grep(
    "succeeded" ,
    system2(
        command = "nc" ,
        args = c("-zv","localhost","8025") ,
        stdout = TRUE , stderr = TRUE )) == 1


if (!is.null(RCPT_TO)&MailServerUp) {
    system2(
        command = "swaks" ,
        args = c(
            "--server","localhost" ,
            "--port","8025" ,
            "--from","do-not-reply@currerius.com" ,
            "--to", paste(RCPT_TO),
            "--attach" , paste(ZipName,".zip",sep="") ,
            "--suppress-data" ,
            "--h-Subject" , "Analyses_from_NORCAD" ,
            "--body","survival.json"))}


#      # To turn on package default HTML options globally:
#      options(markdown.HTML.options = markdownHTMLOptions(default = TRUE))
#      # HTML OPTIONS
#      
#      # The following examples are short, so we allways add the HTML option 'fragment_only'
#      tOpt <- "fragment_only"
#      
#      # skip_html example
#      mkd = '<style></style><img src="http://cran.rstudio.com/Rlogo.jpg"><a href="#">Hello</a>'
#      cat(markdownToHTML(text = mkd, options = c(tOpt)))
#      cat(markdownToHTML(text = mkd, options = c(tOpt, "skip_html")))

#     ‘'fragment_only'’ eliminates the inclusion of any HTML header or body tags, CSS, or Javascript components.

# pandoc -c /home/rforge/Documents/github/tufte-css/tufte.css -s -S -i -t html --mathjax Patient_Characteristics.md -o PCtmp.html
# pandoc -c https://raw.githubusercontent.com/edwardtufte/tufte-css/master/tufte.css -s -S -i -t html --mathjax Patient_Characteristics.md -o PCtmp.html
# pandoc  -s -S -i -t dzslides --mathjax Check_SDMA.md -o Check_SDMA_dzslides.html
