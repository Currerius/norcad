
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(STERM='iESS', str.dendrogram.last="'", editor='emacsclient', show.error.locations=TRUE)
> HOME_DIR <- "/home/rforge/Documents/github/norcad"
> 
>  # load packages
> 
> require(knitr)
Loading required package: knitr
> require(htmlTable)
Loading required package: htmlTable
> require(Hmisc)
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, round.POSIXt, trunc.POSIXt, units

> 
> require(smcfcs)
Loading required package: smcfcs
> require(purrr)
Loading required package: purrr
> 
> require(survival)
> require(quantreg)
Loading required package: quantreg
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve


Attaching package: ‘quantreg’

The following object is masked from ‘package:Hmisc’:

    latex

The following object is masked from ‘package:survival’:

    untangle.specials

> require(mgcv)
Loading required package: mgcv
Loading required package: nlme
This is mgcv 1.8-12. For overview type 'help("mgcv-package")'.
> require(xlsx)
Loading required package: xlsx
Loading required package: rJava
Loading required package: xlsxjars
> 
>  # load all R functions from the directory
> 
> lapply(
+     X = dir( paste( HOME_DIR , "functions" , sep = "/") ) ,
+     FUN = function(X) source( paste( HOME_DIR , "functions" , X , sep = "/"))) -> DoNotPrint
> tmp <- tempdir();system2( "cp" , c("report.json",tmp)); setwd(tmp)
> JSON <- jsonlite::fromJSON( txt = "report.json" , simplifyVector = FALSE)
> 
> Events <- sapply( JSON$Survival$Endpoints , with , Event )
> Es <- paste( "E" , 0:(length(Events) - 1) , sep = "" )
> 
> Times <- sapply( JSON$Survival$Endpoints , with , Time )
> Ts <- paste( "T" , 0:(length(Times) - 1) , sep = "" )
> 
> Predictors <- sapply( JSON$Survival$Predictors , with , Name )
> Ps <- paste( "P" , 0:(length(Predictors) - 1) , sep = "" )
> PBreaks <- array(sapply( JSON$Survival$Predictors , with , Breaks ))
> 
> Modifiers <- sapply( JSON$Survival$Modifiers , with , Name )
> Ms <- paste( "M" , 0:(length(Modifiers) - 1) , sep = "" )
> 
> Adjustments <- sapply( JSON$Survival$Adjustments , with , Name )
> As <- paste( "A" , 0:(length(Adjustments) - 1) , sep = "" )
> nLevels <- sapply( JSON$Survival$Adjustments , with , Level )
> 
> Forestplot <- sapply( JSON$Survival$Forestplot , with , Name )
> Fs <- paste( "F" , 0:(length(Forestplot) - 1) , sep = "" )
> 
> 
> Measures <- sapply( JSON$Characteristics$Measures , with , Name )
> CMs <- paste( "CM" , 0:(length(Measures) - 1) , sep = "" )
> 
> Groups <- sapply( JSON$Characteristics$Groups , with , Name )
> CGs <- paste( "CG" , 0:(length(Groups) - 1) , sep = "" )
> 
>             
> 
>  # create DB statements
> 
> dbVars <- paste0(
+     c(
+         paste( Events , "AS" , Es ) ,
+         paste( Times , "AS" , Ts ) ,
+         paste( Predictors , "AS" , Ps ) ,
+         paste( Modifiers , "AS" , Ms ) ,
+         paste( Adjustments , "AS" , As) ,
+         paste( Groups , "AS" , CGs ) ,
+         paste( Measures , "AS" , CMs ) ,
+         paste( Forestplot , "AS" , Fs )) ,
+         collapse = ", ")
> 
> dbWhere <- paste0(
+     sapply(
+         JSON$Population$Subset ,
+         with ,
+         Where ) ,
+     collapse = " AND " )
>         
> dbStatement <- paste(
+     "SELECT" ,
+     dbVars ,
+     "FROM PATIENT_INFO P
+        LEFT JOIN LAB_BLOOD_TOTAL B ON P.FORUS_ID=B.FORUS_ID
+        LEFT JOIN hs_medikament_skjema M ON P.FORUS_ID=M.FORUS_ID
+        LEFT JOIN hs_hendelser_CVDNOR_mars14 C ON P.NORCAD_ID=C.NORCAD_ID
+        LEFT JOIN hs_pasientrapport_skjema R ON P.FORUS_ID=R.FORUS_ID
+          WHERE" ,
+     dbWhere )
> 
> 
>  # connect to DB and get data
> 
> if ( !exists("con") )
+     con <- DBI::dbConnect(
+         drv = RMySQL::MySQL() ,
+         dbname = JSON$Population$Database )
> 
> D <- DBI::dbGetQuery(
+     conn = con , 
+     statement = dbStatement)
Warning message:
In .local(conn, statement, ...) :
  Decimal MySQL column 24 imported as numeric
> 
> 
> 
>  # create survival objects for Cox regression
> 
> for (i in 0:(length(Events)-1)) {
+     D[ , paste("Surv" , i , sep = "") ] <- Surv(
+         time = D[,paste("T" , i , sep = "") ] ,
+         event = D[,paste("E" , i , sep = "") ] )
+ }
> 
> 
>  # create transformations of the predictor variables
>  # the standard classification for numeric variables is quartiles
>  # for categorical variables the levels from the DB query are taken
> 
> for (i in 0:(length(Predictors)-1)) {
+     if ( sapply( JSON$Survival$Predictors , with , Type )[i+1] == "numeric" ) {
+         Breaks <- unlist( PBreaks[[i+1]] )
+         if ( length(Breaks) == 1 ) { Nclass <- Breaks ; Breaks <- NULL }
+         if ( length(Breaks) == 0 ) { Nclass <- 4 ; Breaks <- NULL }
+         D[ , paste("zP" , i , sep = "") ] <- z( D[ , paste("P" , i , sep = "") ] )
+         D[ , paste("zlogP" , i , sep = "") ] <- zlog( D[ , paste("P" , i , sep = "") ] )
+         D[ , paste("qP" , i , sep = "") ] <- q( D[ , paste("P" , i , sep = "") ] )
+         D[ , paste("cP" , i , sep = "") ] <- cutN( D[ , paste("P" , i , sep = "") ] , n = Nclass , breaks = Breaks)
+         D[ , paste("nP" , i , sep = "") ] <- as.numeric( D[ , paste("cP" , i , sep = "") ] )
+     } else {
+         D[ , paste("cP" , i , sep = "") ] <- D[ , paste("P" , i , sep = "") ]
+         D[ , paste("nP" , i , sep = "") ] <- as.numeric( D[ , paste("P" , i , sep = "") ] )
+     }
+ }
Error in cut.default(x = X + rnorm(n = length(X), mean = 0, sd = 10^-9),  (from misc.R#18) : 
  'breaks' are not unique
> 
> 
>  # create transformations of the modifier variables
>  # the standard classification for numeric variables is dichotomous at median
>  # for categorical variables the levels from the DB query are taken
> 
> for (i in 0:(length(Modifiers)-1)) {
+     if ( sapply( JSON$Survival$Modifiers , with , Type )[i+1] == "numeric" ) {
+         NlevelsMainModifierClass <- 2
+         D[ , paste("zM" , i , sep = "") ] <- z( D[ , paste("M" , i , sep = "") ] )
+         D[ , paste("zlogM" , i , sep = "") ] <- zlog( D[ , paste("M" , i , sep = "") ])
+         D[ , paste("qM" , i , sep = "") ] <- q( D[ , paste("M" , i , sep = "") ] )
+         D[ , paste("cM" , i , sep = "") ] <- cutN( D[ , paste("M" , i , sep = "") ] , NlevelsMainModifierClass )
+         D[ , paste("nM" , i , sep = "") ] <- as.numeric( cutN( D[ , paste("M" , i , sep = "") ] , NlevelsMainModifierClass ))
+     } else {
+         D[ , paste("cM" , i , sep = "") ] <- D[ , paste("M" , i , sep = "") ]
+         D[ , paste("nM" , i , sep = "") ] <- as.numeric( factor(D[ , paste("M" , i , sep = "") ] ))
+     }
+ }
> dim(PBreaks)
[1] 5
> PBreaks
[[1]]
[1] 0

[[2]]
[1] 3

[[3]]
[1] 10

[[4]]
[1] 20

[[5]]
[1] 30

> str(PBreaks)
List of 5
 $ : int 0
 $ : int 3
 $ : int 10
 $ : int 20
 $ : int 30
 - attr(*, "dim")= int 5
> getwd()
[1] "/tmp/RtmpQPTYUv"
> JSON <- jsonlite::fromJSON( txt = "report.json" , simplifyVector = FALSE)
> Events <- sapply( JSON$Survival$Endpoints , with , Event )
> Es <- paste( "E" , 0:(length(Events) - 1) , sep = "" )
> 
> Times <- sapply( JSON$Survival$Endpoints , with , Time )
> Ts <- paste( "T" , 0:(length(Times) - 1) , sep = "" )
> 
> Predictors <- sapply( JSON$Survival$Predictors , with , Name )
> Ps <- paste( "P" , 0:(length(Predictors) - 1) , sep = "" )
> PBreaks <- array(sapply( JSON$Survival$Predictors , with , Breaks ))
> 
> Modifiers <- sapply( JSON$Survival$Modifiers , with , Name )
> Ms <- paste( "M" , 0:(length(Modifiers) - 1) , sep = "" )
> 
> Adjustments <- sapply( JSON$Survival$Adjustments , with , Name )
> As <- paste( "A" , 0:(length(Adjustments) - 1) , sep = "" )
> nLevels <- sapply( JSON$Survival$Adjustments , with , Level )
> 
> Forestplot <- sapply( JSON$Survival$Forestplot , with , Name )
> Fs <- paste( "F" , 0:(length(Forestplot) - 1) , sep = "" )
> 
> 
> Measures <- sapply( JSON$Characteristics$Measures , with , Name )
> CMs <- paste( "CM" , 0:(length(Measures) - 1) , sep = "" )
> 
> Groups <- sapply( JSON$Characteristics$Groups , with , Name )
> CGs <- paste( "CG" , 0:(length(Groups) - 1) , sep = "" )
> length(Predictors)
[1] 1
> unlist( PBreaks )
[1]  0  3 10 20 30
> Breaks <- unlist( PBreaks )
> length(Breaks)
[1] 5
> Breaks <- unlist( PBreaks )
> Breaks
[1]  0  3 10 20 30
> PBreaks <- unlist(sapply( JSON$Survival$Predictors , with , Breaks ))
> PBreaks
[1]  0  3 10 20 30
> length(4)
[1] 1
> 4
[1] 4
> x <- NULL
> x
NULL
> length(x)
[1] 0
> for (i in 0:(length(Predictors)-1)) {
+     if ( sapply( JSON$Survival$Predictors , with , Type )[i+1] == "numeric" ) {
+ 
+         if ( length(PBreaks) == 0 ) { Nclass <- 4 ; PBreaks <- NULL }
+         if ( length(PBreaks) == 1 ) { Nclass <- PBreaks ; PBreaks <- NULL }
+         if ( length(PBreaks) > 1 ) { Nclass <- NULL }
+ 
+         D[ , paste("zP" , i , sep = "") ] <- z( D[ , paste("P" , i , sep = "") ] )
+         D[ , paste("zlogP" , i , sep = "") ] <- zlog( D[ , paste("P" , i , sep = "") ] )
+         D[ , paste("qP" , i , sep = "") ] <- q( D[ , paste("P" , i , sep = "") ] )
+         D[ , paste("cP" , i , sep = "") ] <- cutN( D[ , paste("P" , i , sep = "") ] , n = Nclass , breaks = PBreaks)
+         D[ , paste("nP" , i , sep = "") ] <- as.numeric( D[ , paste("cP" , i , sep = "") ] )
+ 
+     } else {
+ 
+         D[ , paste("cP" , i , sep = "") ] <- D[ , paste("P" , i , sep = "") ]
+         D[ , paste("nP" , i , sep = "") ] <- as.numeric( D[ , paste("P" , i , sep = "") ] )
+ 
+     }
+ }
> P
Error: object 'P' not found
> P0
Error: object 'P0' not found
> Predict
Error: object 'Predict' not found
> Predictors
[1] "TNT"
> PBreaks
[1]  0  3 10 20 30
> dir()
[1] "report.json"
> getwd()
[1] "/tmp/RtmpQPTYUv"
> system2(
+     command = "rm" ,
+     args = c("-r","export"))
rm: cannot remove ‘export’: No such file or directory
> 
> system2(
+     command = "mkdir" ,
+     args = c("-p" , "export/excel"))
> # mkdir -p myProject/{src,doc,tools,db}
> system2(
+     command = "mkdir" ,
+     args = c("export"))
mkdir: cannot create directory ‘export’: File exists
> # mkdir -p myProject/{src,doc,tools,db}
> dir()
[1] "export"      "report.json"
> system2(
+     command = "rm" ,
+     args = c("-r","export"))
> dir()
[1] "report.json"
> system2(
+     command = "mkdir" ,
+     args = c("export"))
> # mkdir -p myProject/{src,doc,tools,db}
> system2(
+     command = "cp" ,
+     args = c(
+         paste( HOME_DIR , "*.Rmd" , sep = "/" ) ,
+         "./export/"))
> dir()
[1] "export"      "report.json"
> setwd("export/")
> dir()
[1] "GAM3d_OR_Predictor_Modifier.Rmd" "Patient_Characteristics.Rmd"    
[3] "Survival_Predictor_Modifier.Rmd" "Survival_Predictor.Rmd"         
> opts_chunk$set(
+     warnings=FALSE,
+     echo=FALSE,
+     dpi = 300 ,
+     dev="svg")
> options( width="130")
> for (n.CG in 1:length(CGs)) {
+ 
+     PCFileName <- gsub(
+         " " , "" ,
+         paste(
+             "PatientCharacteristics",
+             sapply( JSON$Characteristics$Groups , with , ShortLabel )[n.CG] ,
+             sep = "-" ))
+ 
+     PCOutfile <- paste( PCFileName , "md" , sep = "." )
+ 
+     knit2html(
+         input = "Patient_Characteristics.Rmd" ,
+         options=c("use_xhtml","smartypants","mathjax","highlight_code","fragment_only") ,
+         output = PCOutfile )
+     
+ }


processing file: Patient_Characteristics.Rmd
  |........                                                         |  12%
   inline R code fragments

  |................                                                 |  25%
label: PCgetAllVars (with options) 
List of 1
 $ include: logi FALSE

Quitting from lines 8-30 (Patient_Characteristics.Rmd) 
Error in `[.data.frame`(D, , paste("cCG", n.CG - 1, sep = "")) (from <text>#18) : 
  undefined columns selected

> table(D$cCG)
< table of extent 0 >
> dim(D)
[1] 4166   48
> summary(D)
       E0                E1               T0             T1             P0                M0                A0       
 Min.   :0.00000   Min.   :0.0000   Min.   :   1   Min.   :   1   Min.   :   3.00   Min.   :  0.000   Min.   :21.00  
 1st Qu.:0.00000   1st Qu.:0.0000   1st Qu.:1333   1st Qu.:3375   1st Qu.:   3.00   1st Qu.:  0.870   1st Qu.:55.00  
 Median :0.00000   Median :0.0000   Median :1775   Median :3758   Median :   4.00   Median :  1.780   Median :62.00  
 Mean   :0.08281   Mean   :0.1001   Mean   :1805   Mean   :3598   Mean   :  11.35   Mean   :  3.696   Mean   :61.75  
 3rd Qu.:0.00000   3rd Qu.:0.0000   3rd Qu.:2209   3rd Qu.:4235   3rd Qu.:  10.00   3rd Qu.:  3.670   3rd Qu.:70.00  
 Max.   :1.00000   Max.   :1.0000   Max.   :4572   Max.   :5011   Max.   :2898.00   Max.   :135.100   Max.   :88.00  
                                                                  NA's   :90        NA's   :3                        
       A1               A2               A3               A4              CG0               CM0              CM1        
 Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :  0.000   Min.   :0.0000   Min.   :0.0000  
 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:  0.870   1st Qu.:0.0000   1st Qu.:0.0000  
 Median :1.0000   Median :0.0000   Median :0.0000   Median :0.0000   Median :  1.780   Median :0.0000   Median :1.0000  
 Mean   :0.7194   Mean   :0.1191   Mean   :0.2592   Mean   :0.4676   Mean   :  3.696   Mean   :0.1357   Mean   :0.6884  
 3rd Qu.:1.0000   3rd Qu.:0.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:  3.670   3rd Qu.:0.0000   3rd Qu.:1.0000  
 Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :135.100   Max.   :1.0000   Max.   :1.0000  
                                   NA's   :7                         NA's   :3         NA's   :3        NA's   :1024    
      CM2              CM3              CM4              CM5              CM6              CM7              CM8        
 Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  
 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:0.0000  
 Median :0.0000   Median :0.0000   Median :0.0000   Median :0.0000   Median :1.0000   Median :1.0000   Median :1.0000  
 Mean   :0.4033   Mean   :0.4547   Mean   :0.3301   Mean   :0.2154   Mean   :0.8164   Mean   :0.8048   Mean   :0.7249  
 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:0.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  
 Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  
                  NA's   :1        NA's   :1        NA's   :1                         NA's   :26                       
      CM9              CM10             CM11            CM12            CM13             CM14              CM15          
 Min.   :0.0000   Min.   :0.0000   Min.   : 0.00   Min.   :13.67   Min.   :  5.00   Min.   :  3.172   Min.   :  0.00430  
 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:60.00   1st Qu.:24.18   1st Qu.: 78.00   1st Qu.:  6.673   1st Qu.:  0.02706  
 Median :0.0000   Median :0.0000   Median :65.00   Median :26.30   Median : 91.00   Median :  8.180   Median : 18.80951  
 Mean   :0.2067   Mean   :0.1085   Mean   :64.02   Mean   :26.76   Mean   : 87.81   Mean   :  9.467   Mean   : 15.59037  
 3rd Qu.:0.0000   3rd Qu.:0.0000   3rd Qu.:70.00   3rd Qu.:28.95   3rd Qu.: 99.00   3rd Qu.: 10.354   3rd Qu.: 25.30151  
 Max.   :1.0000   Max.   :1.0000   Max.   :90.00   Max.   :54.26   Max.   :136.00   Max.   :223.173   Max.   :109.32761  
                                                   NA's   :3       NA's   :11       NA's   :36        NA's   :36         
      CM16             CM17            CM18             CM19              F0               F1               F2        
 Min.   : 0.430   Min.   :0.000   Min.   : 2.000   Min.   : 0.360   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  
 1st Qu.: 2.400   1st Qu.:1.000   1st Qu.: 4.300   1st Qu.: 1.080   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  
 Median : 2.900   Median :1.200   Median : 4.900   Median : 1.500   Median :1.0000   Median :0.0000   Median :0.0000  
 Mean   : 3.093   Mean   :1.294   Mean   : 5.067   Mean   : 1.778   Mean   :0.7194   Mean   :0.1191   Mean   :0.2592  
 3rd Qu.: 3.700   3rd Qu.:1.500   3rd Qu.: 5.700   3rd Qu.: 2.140   3rd Qu.:1.0000   3rd Qu.:0.0000   3rd Qu.:1.0000  
 Max.   :10.400   Max.   :3.600   Max.   :22.600   Max.   :29.220   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  
 NA's   :4        NA's   :1       NA's   :2        NA's   :4                                          NA's   :7       
       F3             Surv0.time          Surv0.status         Surv1.time         Surv1.status         zP0          
 Min.   :0.0000   Min.   :   1.000     Min.   :0.0000000   Min.   :   1.000    Min.   :0.000000   Min.   :-0.14801  
 1st Qu.:0.0000   1st Qu.:1333.000     1st Qu.:0.0000000   1st Qu.:3375.000    1st Qu.:0.000000   1st Qu.:-0.14801  
 Median :0.0000   Median :1775.000     Median :0.0000000   Median :3758.000    Median :0.000000   Median :-0.13029  
 Mean   :0.4676   Mean   :1805.081     Mean   :0.0828133   Mean   :3598.106    Mean   :0.100096   Mean   : 0.00000  
 3rd Qu.:1.0000   3rd Qu.:2208.750     3rd Qu.:0.0000000   3rd Qu.:4235.000    3rd Qu.:0.000000   3rd Qu.:-0.02397  
 Max.   :1.0000   Max.   :4572.000     Max.   :1.0000000   Max.   :5011.000    Max.   :1.000000   Max.   :51.14966  
                                                                                                  NA's   :90        
     zlogP0             qP0              zM0                zlogM0              qM0                    cM0            nM0     
 Min.   :-0.8178   Min.   : 22.04   Min.   :-0.514559   Min.   :-3.79704   Min.   :  0.02402   [0,1.78]  :2081   Min.   :1.0  
 1st Qu.:-0.8178   1st Qu.: 22.04   1st Qu.:-0.393447   1st Qu.:-0.70094   1st Qu.: 24.86188   (1.78,135]:2081   1st Qu.:1.0  
 Median :-0.4794   Median : 47.15   Median :-0.266766   Median :-0.04272   Median : 50.03603   NA's      :   4   Median :1.0  
 Mean   : 0.0000   Mean   : 50.01   Mean   : 0.000000   Mean   : 0.00000   Mean   : 50.01201                     Mean   :1.5  
 3rd Qu.: 0.5986   3rd Qu.: 74.98   3rd Qu.:-0.003661   3rd Qu.: 0.62259   3rd Qu.: 74.98198                     3rd Qu.:2.0  
 Max.   : 7.2679   Max.   :100.00   Max.   :18.292617   Max.   : 3.93800   Max.   :100.00000                     Max.   :2.0  
 NA's   :90        NA's   :90       NA's   :3           NA's   :3          NA's   :3                             NA's   :4    
      cP0            nP0       
 [0,3]  : 900   Min.   :1.000  
 (3,10] :2152   1st Qu.:2.000  
 (10,20]: 644   Median :2.000  
 (20,30]: 184   Mean   :2.029  
 NA's   : 286   3rd Qu.:2.000  
                Max.   :4.000  
                NA's   :286    
> Measures <- sapply( JSON$Characteristics$Measures , with , Name )
> CMs <- paste( "CM" , 0:(length(Measures) - 1) , sep = "" )
> 
> Groups <- sapply( JSON$Characteristics$Groups , with , Name )
> CGs <- paste( "CG" , 0:(length(Groups) - 1) , sep = "" )
> CGs
[1] "CG0"
> Groups
[1] "CRP"
> dbVars <- paste0(
+     c(
+         paste( Events , "AS" , Es ) ,
+         paste( Times , "AS" , Ts ) ,
+         paste( Predictors , "AS" , Ps ) ,
+         paste( Modifiers , "AS" , Ms ) ,
+         paste( Adjustments , "AS" , As) ,
+         paste( Groups , "AS" , CGs ) ,
+         paste( Measures , "AS" , CMs ) ,
+         paste( Forestplot , "AS" , Fs )) ,
+         collapse = ", ")
> 
> dbWhere <- paste0(
+     sapply(
+         JSON$Population$Subset ,
+         with ,
+         Where ) ,
+     collapse = " AND " )
>         
> dbStatement <- paste(
+     "SELECT" ,
+     dbVars ,
+     "FROM PATIENT_INFO P
+        LEFT JOIN LAB_BLOOD_TOTAL B ON P.FORUS_ID=B.FORUS_ID
+        LEFT JOIN hs_medikament_skjema M ON P.FORUS_ID=M.FORUS_ID
+        LEFT JOIN hs_hendelser_CVDNOR_mars14 C ON P.NORCAD_ID=C.NORCAD_ID
+        LEFT JOIN hs_pasientrapport_skjema R ON P.FORUS_ID=R.FORUS_ID
+          WHERE" ,
+     dbWhere )
> 
> 
>  # connect to DB and get data
> 
> if ( !exists("con") )
+     con <- DBI::dbConnect(
+         drv = RMySQL::MySQL() ,
+         dbname = JSON$Population$Database )
> 
> D <- DBI::dbGetQuery(
+     conn = con , 
+     statement = dbStatement)
Warning message:
In .local(conn, statement, ...) :
  Decimal MySQL column 24 imported as numeric
> 
> 
> 
>  # create survival objects for Cox regression
> 
> for (i in 0:(length(Events)-1)) {
+     D[ , paste("Surv" , i , sep = "") ] <- Surv(
+         time = D[,paste("T" , i , sep = "") ] ,
+         event = D[,paste("E" , i , sep = "") ] )
+ }
> 
> 
>  # create transformations of the predictor variables
>  # the standard classification for numeric variables is quartiles
>  # for categorical variables the levels from the DB query are taken
> 
> for (i in 0:(length(Predictors)-1)) {
+     if ( sapply( JSON$Survival$Predictors , with , Type )[i+1] == "numeric" ) {
+ 
+         if ( length(PBreaks) == 0 ) { Nclass <- 4 ; PBreaks <- NULL }
+         if ( length(PBreaks) == 1 ) { Nclass <- PBreaks ; PBreaks <- NULL }
+         if ( length(PBreaks) > 1 ) { Nclass <- NULL }
+ 
+         D[ , paste("zP" , i , sep = "") ] <- z( D[ , paste("P" , i , sep = "") ] )
+         D[ , paste("zlogP" , i , sep = "") ] <- zlog( D[ , paste("P" , i , sep = "") ] )
+         D[ , paste("qP" , i , sep = "") ] <- q( D[ , paste("P" , i , sep = "") ] )
+         D[ , paste("cP" , i , sep = "") ] <- cutN( D[ , paste("P" , i , sep = "") ] , n = Nclass , breaks = PBreaks)
+         D[ , paste("nP" , i , sep = "") ] <- as.numeric( D[ , paste("cP" , i , sep = "") ] )
+ 
+     } else {
+ 
+         D[ , paste("cP" , i , sep = "") ] <- D[ , paste("P" , i , sep = "") ]
+         D[ , paste("nP" , i , sep = "") ] <- as.numeric( D[ , paste("P" , i , sep = "") ] )
+ 
+     }
+ }
> 
> 
>  # create transformations of the modifier variables
>  # the standard classification for numeric variables is dichotomous at median
>  # for categorical variables the levels from the DB query are taken
> 
> for (i in 0:(length(Modifiers)-1)) {
+     if ( sapply( JSON$Survival$Modifiers , with , Type )[i+1] == "numeric" ) {
+         NlevelsMainModifierClass <- 2
+         D[ , paste("zM" , i , sep = "") ] <- z( D[ , paste("M" , i , sep = "") ] )
+         D[ , paste("zlogM" , i , sep = "") ] <- zlog( D[ , paste("M" , i , sep = "") ])
+         D[ , paste("qM" , i , sep = "") ] <- q( D[ , paste("M" , i , sep = "") ] )
+         D[ , paste("cM" , i , sep = "") ] <- cutN( D[ , paste("M" , i , sep = "") ] , NlevelsMainModifierClass )
+         D[ , paste("nM" , i , sep = "") ] <- as.numeric( cutN( D[ , paste("M" , i , sep = "") ] , NlevelsMainModifierClass ))
+     } else {
+         D[ , paste("cM" , i , sep = "") ] <- D[ , paste("M" , i , sep = "") ]
+         D[ , paste("nM" , i , sep = "") ] <- as.numeric( factor(D[ , paste("M" , i , sep = "") ] ))
+     }
+ }
> 
> 
>  # check if the grouping variables for the
>  # patient characteristics tables are categorical or
>  # numeric and transform to quartiles in the latter case
> 
> for (i in 0:(length(Groups)-1)) {
+     if ( sapply( JSON$Characteristics$Groups , with , Type )[i+1] == "numeric" ) {
+         D[ , paste("cCG" , i , sep = "") ] <- cutN( D[ , paste("CG" , i , sep = "") ] , n = 4 )
+         D[ , paste("nCG" , i , sep = "") ] <- as.numeric( cutN( D[ , paste("CG" , i , sep = "") ] , n = 4 ))
+     } else {
+         D[ , paste("cCG" , i , sep = "") ] <- factor( D[ , paste("CG" , i , sep = "") ] )
+         D[ , paste("nCG" , i , sep = "") ] <- as.numeric( factor(D[ , paste("CG" , i , sep = "") ] ))
+     }
+ }
> summary(D$cCG)
   [0,0.87] (0.87,1.78] (1.78,3.67]  (3.67,135]        NA's 
       1035        1050        1033        1044           4 
> dir()
[1] "GAM3d_OR_Predictor_Modifier.Rmd" "Patient_Characteristics.md"      "Patient_Characteristics.Rmd"    
[4] "Survival_Predictor_Modifier.Rmd" "Survival_Predictor.Rmd"         
> 