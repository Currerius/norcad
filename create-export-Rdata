#!/usr/bin/Rscript

 # create DB statements

dbExVars <- paste0(
    c(
        paste( Events ) ,
        paste( Times ) ,
        paste( Predictors ) ,
        paste( Modifiers ) ,
        paste( Adjustments , "AS" , As ) ,
        paste( Groups ) ,
        paste( Measures ) ,
        paste( Forestplot )) ,
        collapse = ", ")

dbExWhere <- paste0(
    sapply(
        JSON$Population$Subset ,
        with ,
        Where ) ,
    collapse = " AND " )
        
dbExStatement <- paste(
    "SELECT" ,
    dbExVars ,
    "FROM PATIENT_INFO P
       LEFT JOIN LAB_BLOOD_TOTAL B ON P.FORUS_ID=B.FORUS_ID
       LEFT JOIN hs_medikament_skjema M ON P.FORUS_ID=M.FORUS_ID
       LEFT JOIN hs_hendelser_CVDNOR_mars14 C ON P.NORCAD_ID=C.NORCAD_ID
       LEFT JOIN hs_pasientrapport_skjema R ON P.FORUS_ID=R.FORUS_ID
         WHERE" ,
    dbWhere )


 # connect to DB and get data

if ( !exists("con") )
    con <- DBI::dbConnect(
        drv = RMySQL::MySQL() ,
        dbname = JSON$Population$Database )

DEx <- DBI::dbGetQuery(
    conn = con , 
    statement = dbExStatement)



 # create survival objects for Cox regression

for (i in 0:(length(Events)-1)) {
    DEx[ , paste("Surv" , i , sep = "") ] <- Surv(
        time = DEx[,paste("T" , i , sep = "") ] ,
        event = DEx[,paste("E" , i , sep = "") ] )
}



 # create transformations of the predictor variables
 # the standard classification for numeric variables is quartiles
 # for categorical variables the levels from the DB query are taken

for (i in 0:(length(Predictors)-1)) {
    if ( sapply( JSON$Survival$Predictors , with , Type )[i+1] == "numeric" ) {
        Breaks <- unlist( PBreaks[[i+1]] )
        if ( length(Breaks) == 1 ) { Nclass <- Breaks ; Breaks <- NULL }
        if ( length(Breaks) == 0 ) { Nclass <- 4 ; Breaks <- NULL }
        D[ , paste("zP" , i , sep = "") ] <- z( D[ , paste("P" , i , sep = "") ] )
        D[ , paste("zlogP" , i , sep = "") ] <- zlog( D[ , paste("P" , i , sep = "") ] )
        D[ , paste("qP" , i , sep = "") ] <- q( D[ , paste("P" , i , sep = "") ] )
        D[ , paste("cP" , i , sep = "") ] <- cutN( D[ , paste("P" , i , sep = "") ] , n = Nclass , breaks = Breaks)
        D[ , paste("nP" , i , sep = "") ] <- as.numeric( D[ , paste("cP" , i , sep = "") ] )
    } else {
        D[ , paste("cP" , i , sep = "") ] <- D[ , paste("P" , i , sep = "") ]
        D[ , paste("nP" , i , sep = "") ] <- as.numeric( D[ , paste("P" , i , sep = "") ] )
    }
}



 # create transformations of the modifier variables
 # the standard classification for numeric variables is dichotomous at median
 # for categorical variables the levels from the DB query are taken

for (i in 0:(length(Modifiers)-1)) {
    if ( sapply( JSON$Survival$Modifiers , with , Type )[i+1] == "numeric" ) {
        NlevelsMainModifierClass <- 2
        D[ , paste("zM" , i , sep = "") ] <- z( D[ , paste("M" , i , sep = "") ] )
        D[ , paste("zlogM" , i , sep = "") ] <- zlog( D[ , paste("M" , i , sep = "") ])
        D[ , paste("qM" , i , sep = "") ] <- q( D[ , paste("M" , i , sep = "") ] )
        D[ , paste("cM" , i , sep = "") ] <- cutN( D[ , paste("M" , i , sep = "") ] , NlevelsMainModifierClass )
        D[ , paste("nM" , i , sep = "") ] <- as.numeric( cutN( D[ , paste("M" , i , sep = "") ] , NlevelsMainModifierClass ))
    } else {
        D[ , paste("cM" , i , sep = "") ] <- D[ , paste("M" , i , sep = "") ]
        D[ , paste("nM" , i , sep = "") ] <- as.numeric( factor(D[ , paste("M" , i , sep = "") ] ))
    }
}


 # check if the grouping variables for the
 # patient characteristics tables are categorical or
 # numeric and transform to quartiles in the latter case

for (i in 0:(length(Groups)-1)) {
    if ( sapply( JSON$Characteristics$Groups , with , Type )[i+1] == "numeric" ) {
        D[ , paste("cCG" , i , sep = "") ] <- cutN( D[ , paste("CG" , i , sep = "") ] , n = 4 )
        D[ , paste("nCG" , i , sep = "") ] <- as.numeric( cutN( D[ , paste("CG" , i , sep = "") ] , n = 4 ))
    } else {
        D[ , paste("cCG" , i , sep = "") ] <- factor( D[ , paste("CG" , i , sep = "") ] )
        D[ , paste("nCG" , i , sep = "") ] <- as.numeric( factor(D[ , paste("CG" , i , sep = "") ] ))
    }
}

