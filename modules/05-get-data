#!/usr/bin/Rscript

dbVars <- paste0(
    c(
        paste( Events , "AS" , Es ) ,
        paste( Times , "AS" , Ts ) ,
        paste( Predictors , "AS" , Ps ) ,
        paste( Modifiers , "AS" , Ms ) ,
        paste( Adjustments , "AS" , As) ,
        paste( Groups , "AS" , CGs ) ,
        paste( Measures , "AS" , CMs ) ,
        paste( Forestplot , "AS" , Fs )) ,
        collapse = ", ")

dbWhere <- paste0(
    sapply(
        JSON$Population$Subset ,
        with ,
        Where ) ,
    collapse = " AND " )
        
dbStatement <- paste(
    "SELECT" ,
    dbVars ,
    "FROM patient P
       LEFT JOIN blood B ON P.FORUS_ID=B.FORUS_ID
       LEFT JOIN medication M ON P.FORUS_ID=M.FORUS_ID
       LEFT JOIN events C ON P.NORCAD_ID=C.NORCAD_ID
       LEFT JOIN sq R ON P.FORUS_ID=R.FORUS_ID
         WHERE" ,
    dbWhere )

 # connect to DB and get data

if ( !exists("con") )
    con <- DBI::dbConnect(
        drv = RSQLite::SQLite() ,
        dbname = "/home/rforge/Documents/onyg/db/norcad.sqlite" )

D <- DBI::dbGetQuery(
    conn = con , 
    statement = dbStatement)



 # create survival objects for Cox regression

for (i in 0:(length(Events)-1)) {
    D[ , paste("Surv" , i , sep = "") ] <- Surv(
        time = D[,paste("T" , i , sep = "") ] ,
        event = D[,paste("E" , i , sep = "") ] )
}


 # create transformations of the predictor variables
 # the standard classification for numeric variables is quartiles
 # for categorical variables the levels from the DB query are taken

for (i in 0:(length(Predictors)-1)) {
    if ( sapply( JSON$Survival$Predictors , with , Type )[i+1] == "numeric" ) {

        if ( length(PBreaks) == 0 ) { Nclass <- 4 ; PBreaks <- NULL }
        if ( length(PBreaks) == 1 ) { Nclass <- PBreaks ; PBreaks <- NULL }
        if ( length(PBreaks) > 1 ) { Nclass <- NULL }

        D[ , paste("zP" , i , sep = "") ] <- z( D[ , paste("P" , i , sep = "") ] )
        D[ , paste("zlogP" , i , sep = "") ] <- zlog( D[ , paste("P" , i , sep = "") ] )
        D[ , paste("qP" , i , sep = "") ] <- q( D[ , paste("P" , i , sep = "") ] )
        D[ , paste("cP" , i , sep = "") ] <- cutN( D[ , paste("P" , i , sep = "") ] , n = Nclass , breaks = PBreaks)
        D[ , paste("nP" , i , sep = "") ] <- as.numeric( D[ , paste("cP" , i , sep = "") ] )

    } else {

        D[ , paste("cP" , i , sep = "") ] <- D[ , paste("P" , i , sep = "") ]
        D[ , paste("nP" , i , sep = "") ] <- as.numeric( D[ , paste("P" , i , sep = "") ] )

    }
}


 # create transformations of the modifier variables
 # the standard classification for numeric variables is dichotomous at median
 # for categorical variables the levels from the DB query are taken

for (i in 0:(length(Modifiers)-1)) {
    if ( sapply( JSON$Survival$Modifiers , with , Type )[i+1] == "numeric" ) {
        NlevelsMainModifierClass <- 2
        D[ , paste("zM" , i , sep = "") ] <- z( D[ , paste("M" , i , sep = "") ] )
        D[ , paste("zlogM" , i , sep = "") ] <- zlog( D[ , paste("M" , i , sep = "") ])
        D[ , paste("qM" , i , sep = "") ] <- q( D[ , paste("M" , i , sep = "") ] )
        D[ , paste("cM" , i , sep = "") ] <- cutN( D[ , paste("M" , i , sep = "") ] , NlevelsMainModifierClass )
        D[ , paste("nM" , i , sep = "") ] <- as.numeric( cutN( D[ , paste("M" , i , sep = "") ] , NlevelsMainModifierClass ))
    } else {
        D[ , paste("cM" , i , sep = "") ] <- D[ , paste("M" , i , sep = "") ]
        D[ , paste("nM" , i , sep = "") ] <- as.numeric( factor(D[ , paste("M" , i , sep = "") ] ))
    }
}


 # check if the grouping variables for the
 # patient characteristics tables are categorical or
 # numeric and transform to quartiles in the latter case

for (i in 0:(length(Groups)-1)) {
    if ( sapply( JSON$Characteristics$Groups , with , Type )[i+1] == "numeric" ) {
        D[ , paste("cCG" , i , sep = "") ] <- cutN( D[ , paste("CG" , i , sep = "") ] , n = 4 )
        D[ , paste("nCG" , i , sep = "") ] <- as.numeric( cutN( D[ , paste("CG" , i , sep = "") ] , n = 4 ))
    } else {
        D[ , paste("cCG" , i , sep = "") ] <- factor( D[ , paste("CG" , i , sep = "") ] )
        D[ , paste("nCG" , i , sep = "") ] <- as.numeric( factor(D[ , paste("CG" , i , sep = "") ] ))
    }
}

